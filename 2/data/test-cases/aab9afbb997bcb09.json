{"uid":"aab9afbb997bcb09","name":"test_dynamic_steps","fullName":"tests.test_steps#test_dynamic_steps","historyId":"7c7c5e5f20fe2663d33f122f5ce2ca5a","time":{"start":1699088446325,"stop":1699088447174,"duration":849},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5596958795e3 <unknown>\n#1 0x55969553c0b7 <unknown>\n#2 0x559695572e55 <unknown>\n#3 0x55969556fb81 <unknown>\n#4 0x5596955ba47f <unknown>\n#5 0x5596955b0cc3 <unknown>\n#6 0x55969557c0e4 <unknown>\n#7 0x55969557d0ae <unknown>\n#8 0x55969583fce1 <unknown>\n#9 0x559695843b7e <unknown>\n#10 0x55969582d4b5 <unknown>\n#11 0x5596958447d6 <unknown>\n#12 0x559695810dbf <unknown>\n#13 0x559695867748 <unknown>\n#14 0x559695867917 <unknown>\n#15 0x559695878773 <unknown>\n#16 0x7ff53e094ac3 <unknown>","statusTrace":"def test_dynamic_steps():\n        with allure.step(\"Открываем главную страницу\"):\n>           browser.open(\"https://github.com\")\n\ntests/test_steps.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/entity.py:1155: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py:301: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py:216: in get\n    driver = config.driver\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py:343: in __get__\n    driver = config.build_driver_strategy(config)\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py:171: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py:93: in install_and_build_chrome\n    return Chrome(\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:56: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0b2b8d4440>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...\\\\n#14 0x559695867917 \\\\u003Cunknown>\\\\n#15 0x559695878773 \\\\u003Cunknown>\\\\n#16 0x7ff53e094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5596958795e3 <unknown>\nE       #1 0x55969553c0b7 <unknown>\nE       #2 0x559695572e55 <unknown>\nE       #3 0x55969556fb81 <unknown>\nE       #4 0x5596955ba47f <unknown>\nE       #5 0x5596955b0cc3 <unknown>\nE       #6 0x55969557c0e4 <unknown>\nE       #7 0x55969557d0ae <unknown>\nE       #8 0x55969583fce1 <unknown>\nE       #9 0x559695843b7e <unknown>\nE       #10 0x55969582d4b5 <unknown>\nE       #11 0x5596958447d6 <unknown>\nE       #12 0x559695810dbf <unknown>\nE       #13 0x559695867748 <unknown>\nE       #14 0x559695867917 <unknown>\nE       #15 0x559695878773 <unknown>\nE       #16 0x7ff53e094ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5596958795e3 <unknown>\n#1 0x55969553c0b7 <unknown>\n#2 0x559695572e55 <unknown>\n#3 0x55969556fb81 <unknown>\n#4 0x5596955ba47f <unknown>\n#5 0x5596955b0cc3 <unknown>\n#6 0x55969557c0e4 <unknown>\n#7 0x55969557d0ae <unknown>\n#8 0x55969583fce1 <unknown>\n#9 0x559695843b7e <unknown>\n#10 0x55969582d4b5 <unknown>\n#11 0x5596958447d6 <unknown>\n#12 0x559695810dbf <unknown>\n#13 0x559695867748 <unknown>\n#14 0x559695867917 <unknown>\n#15 0x559695878773 <unknown>\n#16 0x7ff53e094ac3 <unknown>","statusTrace":"def test_dynamic_steps():\n        with allure.step(\"Открываем главную страницу\"):\n>           browser.open(\"https://github.com\")\n\ntests/test_steps.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/entity.py:1155: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py:301: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py:216: in get\n    driver = config.driver\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py:343: in __get__\n    driver = config.build_driver_strategy(config)\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py:171: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py:93: in install_and_build_chrome\n    return Chrome(\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:56: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0b2b8d4440>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...\\\\n#14 0x559695867917 \\\\u003Cunknown>\\\\n#15 0x559695878773 \\\\u003Cunknown>\\\\n#16 0x7ff53e094ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5596958795e3 <unknown>\nE       #1 0x55969553c0b7 <unknown>\nE       #2 0x559695572e55 <unknown>\nE       #3 0x55969556fb81 <unknown>\nE       #4 0x5596955ba47f <unknown>\nE       #5 0x5596955b0cc3 <unknown>\nE       #6 0x55969557c0e4 <unknown>\nE       #7 0x55969557d0ae <unknown>\nE       #8 0x55969583fce1 <unknown>\nE       #9 0x559695843b7e <unknown>\nE       #10 0x55969582d4b5 <unknown>\nE       #11 0x5596958447d6 <unknown>\nE       #12 0x559695810dbf <unknown>\nE       #13 0x559695867748 <unknown>\nE       #14 0x559695867917 <unknown>\nE       #15 0x559695878773 <unknown>\nE       #16 0x7ff53e094ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","steps":[{"name":"Открываем главную страницу","time":{"start":1699088446325,"stop":1699088447173,"duration":848},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5596958795e3 <unknown>\n#1 0x55969553c0b7 <unknown>\n#2 0x559695572e55 <unknown>\n#3 0x55969556fb81 <unknown>\n#4 0x5596955ba47f <unknown>\n#5 0x5596955b0cc3 <unknown>\n#6 0x55969557c0e4 <unknown>\n#7 0x55969557d0ae <unknown>\n#8 0x55969583fce1 <unknown>\n#9 0x559695843b7e <unknown>\n#10 0x55969582d4b5 <unknown>\n#11 0x5596958447d6 <unknown>\n#12 0x559695810dbf <unknown>\n#13 0x559695867748 <unknown>\n#14 0x559695867917 <unknown>\n#15 0x559695878773 <unknown>\n#16 0x7ff53e094ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/qa_guru_python_8_9/qa_guru_python_8_9/tests/test_steps.py\", line 10, in test_dynamic_steps\n    browser.open(\"https://github.com\")\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/entity.py\", line 1155, in open\n    self.config._executor.get_url(relative_or_absolute_url)\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 301, in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 216, in get\n    driver = config.driver\n             ^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 343, in __get__\n    driver = config.build_driver_strategy(config)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 171, in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n           ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 93, in install_and_build_chrome\n    return Chrome(\n           ^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py\", line 56, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 208, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 292, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.0/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"7c62b80bd9f9de61","name":"stderr","source":"7c62b80bd9f9de61.txt","type":"text/plain","size":258}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_steps"},{"name":"host","value":"fv-az1380-0"},{"name":"thread","value":"2271-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_steps"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"9dc572736ea03b44","reportUrl":"https://MZhurova.github.io/qa_guru_python_8_9/1//#testresult/9dc572736ea03b44","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x56473ca87fb3 <unknown>\n#1 0x56473c75b4a7 <unknown>\n#2 0x56473c78ec93 <unknown>\n#3 0x56473c78b10c <unknown>\n#4 0x56473c7cdac6 <unknown>\n#5 0x56473c7c4713 <unknown>\n#6 0x56473c79718b <unknown>\n#7 0x56473c797f7e <unknown>\n#8 0x56473ca4d8d8 <unknown>\n#9 0x56473ca51800 <unknown>\n#10 0x56473ca5bcfc <unknown>\n#11 0x56473ca52418 <unknown>\n#12 0x56473ca1f42f <unknown>\n#13 0x56473ca764e8 <unknown>\n#14 0x56473ca766b4 <unknown>\n#15 0x56473ca87143 <unknown>\n#16 0x7f1b0fa94ac3 <unknown>","time":{"start":1697910756665,"stop":1697910757493,"duration":828}}]},"tags":[]},"source":"aab9afbb997bcb09.json","parameterValues":[]}